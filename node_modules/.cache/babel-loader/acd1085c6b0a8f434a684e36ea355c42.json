{"ast":null,"code":"var _jsxFileName = \"/home/jermaniac/projectGermanMain/webprojectREACT/webexpresssionproject/src/components/InfoComponent.jsx\";\nimport React from 'react';\nimport '../styles/InfoComponent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction InfoComponent({\n  expressions\n}) {\n  if (expressions) {\n    let expressionsFormatted = formatProbabilities(expressions);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-12 col-md-8 col-lg-9\",\n      id: \"info\",\n      children: expressionsFormatted.map(expression => {\n        let emojiSrc = `./assets/images/emoji_${expression.mood}.png`;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          id: \"content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-11\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"barra\",\n                className: \"progress-bar\",\n                \"aria-valuemin\": \"0\",\n                \"aria-valuemax\": \"100\",\n                style: {\n                  width: expression.probability + \"%\"\n                },\n                children: expression.probability\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 18,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"badge\",\n                children: expression.mood\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 27,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 17,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-1\",\n            id: \"imageEmoji\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: emojiSrc,\n              alt: \"emoji\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 15\n          }, this)]\n        }, expression.mood, true, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }, this) // <div></div>\n    ;\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }, this);\n  }\n}\n\n_c = InfoComponent;\n\nfunction formatProbabilities(expressions) {\n  return expressions.map(expression => {\n    return {\n      mood: expression.mood,\n      probability: (expression.probability * 100).toFixed(2)\n    };\n  });\n}\n\nexport default InfoComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfoComponent\");","map":{"version":3,"sources":["/home/jermaniac/projectGermanMain/webprojectREACT/webexpresssionproject/src/components/InfoComponent.jsx"],"names":["React","InfoComponent","expressions","expressionsFormatted","formatProbabilities","map","expression","emojiSrc","mood","width","probability","toFixed"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,6BAAP;;;AAEA,SAASC,aAAT,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAAwC;AAEtC,MAAIA,WAAJ,EAAiB;AACf,QAAIC,oBAAoB,GAAGC,mBAAmB,CAACF,WAAD,CAA9C;AAEA,wBACA;AAAK,MAAA,SAAS,EAAC,0BAAf;AAA0C,MAAA,EAAE,EAAC,MAA7C;AAAA,gBAEIC,oBAAoB,CAACE,GAArB,CAA0BC,UAAD,IAAgB;AACvC,YAAIC,QAAQ,GAAI,yBAAwBD,UAAU,CAACE,IAAK,MAAxD;AACA,4BACE;AAAK,UAAA,SAAS,EAAC,KAAf;AAAqB,UAAA,EAAE,EAAC,SAAxB;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,QAAf;AAAA,mCACE;AAAK,cAAA,SAAS,EAAC,UAAf;AAAA,sCACE;AACE,gBAAA,EAAE,EAAC,OADL;AAEE,gBAAA,SAAS,EAAC,cAFZ;AAGE,iCAAc,GAHhB;AAIE,iCAAc,KAJhB;AAKE,gBAAA,KAAK,EAAE;AAAEC,kBAAAA,KAAK,EAAEH,UAAU,CAACI,WAAX,GAAyB;AAAlC,iBALT;AAAA,0BAOGJ,UAAU,CAACI;AAPd;AAAA;AAAA;AAAA;AAAA,sBADF,eAUE;AAAM,gBAAA,SAAS,EAAC,OAAhB;AAAA,0BAAyBJ,UAAU,CAACE;AAApC;AAAA;AAAA;AAAA;AAAA,sBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAeE;AAAK,YAAA,SAAS,EAAC,OAAf;AAAuB,YAAA,EAAE,EAAC,YAA1B;AAAA,mCACE;AACE,cAAA,GAAG,EAAED,QADP;AAEE,cAAA,GAAG,EAAC;AAFN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAfF;AAAA,WAAuCD,UAAU,CAACE,IAAlD;AAAA;AAAA;AAAA;AAAA,gBADF;AAwBD,OA1BD;AAFJ;AAAA;AAAA;AAAA;AAAA,YADA,CAgCA;AAhCA;AAkCD,GArCD,MAqCO;AACL,wBACM;AAAA;AAAA;AAAA;AAAA,YADN;AAID;AACF;;KA7CQP,a;;AA+CT,SAASG,mBAAT,CAA6BF,WAA7B,EAAyC;AACrC,SAAOA,WAAW,CAACG,GAAZ,CAAkBC,UAAD,IAAgB;AACpC,WAAQ;AACJE,MAAAA,IAAI,EAAEF,UAAU,CAACE,IADb;AAEJE,MAAAA,WAAW,EAAE,CAACJ,UAAU,CAACI,WAAX,GAAyB,GAA1B,EAA+BC,OAA/B,CAAuC,CAAvC;AAFT,KAAR;AAKH,GANM,CAAP;AAQH;;AAED,eAAeV,aAAf","sourcesContent":["import React from 'react';\nimport '../styles/InfoComponent.css'\n\nfunction InfoComponent({ expressions }) {\n\n  if (expressions) {\n    let expressionsFormatted = formatProbabilities(expressions);\n\n    return (\n    <div className=\"col-12 col-md-8 col-lg-9\" id=\"info\">\n        {\n        expressionsFormatted.map((expression) => {\n          let emojiSrc = `./assets/images/emoji_${expression.mood}.png`;\n          return (\n            <div className=\"row\" id=\"content\" key={expression.mood}>\n              <div className=\"col-11\">\n                <div className=\"progress\">\n                  <div\n                    id=\"barra\"\n                    className=\"progress-bar\"\n                    aria-valuemin=\"0\"\n                    aria-valuemax=\"100\"\n                    style={{ width: expression.probability + \"%\" }}\n                  >\n                    {expression.probability}\n                  </div>\n                  <span className=\"badge\">{expression.mood}</span>\n                </div>\n              </div>\n              <div className=\"col-1\" id=\"imageEmoji\">\n                <img\n                  src={emojiSrc}\n                  alt=\"emoji\"\n                ></img>\n              </div>\n            </div>\n          );\n        })\n        }\n      </div>\n    // <div></div>\n    );\n  } else {\n    return (\n          <div>\n          </div>\n    );\n  }\n}\n\nfunction formatProbabilities(expressions){\n    return expressions.map( (expression) => {\n        return  {\n            mood: expression.mood,\n            probability: (expression.probability * 100).toFixed(2)\n        }\n\n    })\n\n}\n\nexport default InfoComponent;"]},"metadata":{},"sourceType":"module"}